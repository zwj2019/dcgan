import argparse

from pytorch_lightning import Trainer

from model.dcgan import DCGAN
from data_utils import FaceDataset


def get_argparse():
    parser = argparse.ArgumentParser()
    parser.add_argument('--dataroot', help="Path to the root of the dataset folder", required=True, type=str)
    parser.add_argument('--workers', help="Number of worker threads for loading the data with the DataLoader", type=int, default=0)
    parser.add_argument('--batch_size', help="Batch size used in training", type=int, default=128)
    parser.add_argument('--image_size', help="Spatial size of the images used for training", type=int, default=64)
    parser.add_argument('--nc', help="Number of color channels in the input images", type=int, default=3)
    parser.add_argument('--num_epochs', help="Number of training epochs to run", type=int, default=200)
    parser.add_argument('--ngpu', help="Number of GPU, 0 for CPU", type=int, default=0)
    parser.add_argument('--output', help="Path to save image generated by `Generator` during training", type=str, default="./output/")

    # parser.parse_args()
    return parser

if __name__ == '__main__':
    parser = get_argparse()
    parser = DCGAN.add_model_specific_args(parser)
    parser = Trainer.add_argparse_args(parser)
    
    args = parser.parse_args()

    # trainer = Trainer(fast_dev_run=True, gpus=args.ngpu)
    trainer = Trainer(max_epochs=args.num_epochs, gpus=args.ngpu)
    model = DCGAN(args)

    face_dataset = FaceDataset(args)
    print(type(face_dataset))
    # face_dataset.prepare_data()
    # debug
    trainer.fit(model, face_dataset)